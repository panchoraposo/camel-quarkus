package app.acindar.consumosma.creaorden;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;
import jakarta.xml.ws.Service;

/**
 * This class was generated by Apache CXF 4.0.4.fuse-redhat-00033
 * 2024-11-12T18:49:34.828-03:00
 * Generated source version: 4.0.4.fuse-redhat-00033
 *
 */
@WebServiceClient(name = "SI_WS_TO_RFC_ZACPMF001_ReqService",
                  wsdlLocation = "file:/Users/pancho/Documents/codes/acindar/quarkus-soap-to-odata/src/main/resources/wsdl/SI_WS_TO_RFC_ZACPMF001_ReqService.wsdl",
                  targetNamespace = "urn:app:acindar:ConsumoSMA:CreaOrden")
public class SIWSTORFCZACPMF001ReqService extends Service {

    public static final URL WSDL_LOCATION;

    public static final QName SERVICE = new QName("urn:app:acindar:ConsumoSMA:CreaOrden", "SI_WS_TO_RFC_ZACPMF001_ReqService");
    public static final QName HTTPSPort = new QName("urn:app:acindar:ConsumoSMA:CreaOrden", "HTTPS_Port");
    public static final QName HTTPPort = new QName("urn:app:acindar:ConsumoSMA:CreaOrden", "HTTP_Port");
    static {
        URL url = null;
        try {
            url = new URL("file:/Users/pancho/Documents/codes/acindar/quarkus-soap-to-odata/src/main/resources/wsdl/SI_WS_TO_RFC_ZACPMF001_ReqService.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(SIWSTORFCZACPMF001ReqService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/Users/pancho/Documents/codes/acindar/quarkus-soap-to-odata/src/main/resources/wsdl/SI_WS_TO_RFC_ZACPMF001_ReqService.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public SIWSTORFCZACPMF001ReqService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public SIWSTORFCZACPMF001ReqService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public SIWSTORFCZACPMF001ReqService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public SIWSTORFCZACPMF001ReqService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public SIWSTORFCZACPMF001ReqService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public SIWSTORFCZACPMF001ReqService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns SIWSTORFCZACPMF001Req
     */
    @WebEndpoint(name = "HTTPS_Port")
    public SIWSTORFCZACPMF001Req getHTTPSPort() {
        return super.getPort(HTTPSPort, SIWSTORFCZACPMF001Req.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SIWSTORFCZACPMF001Req
     */
    @WebEndpoint(name = "HTTPS_Port")
    public SIWSTORFCZACPMF001Req getHTTPSPort(WebServiceFeature... features) {
        return super.getPort(HTTPSPort, SIWSTORFCZACPMF001Req.class, features);
    }


    /**
     *
     * @return
     *     returns SIWSTORFCZACPMF001Req
     */
    @WebEndpoint(name = "HTTP_Port")
    public SIWSTORFCZACPMF001Req getHTTPPort() {
        return super.getPort(HTTPPort, SIWSTORFCZACPMF001Req.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SIWSTORFCZACPMF001Req
     */
    @WebEndpoint(name = "HTTP_Port")
    public SIWSTORFCZACPMF001Req getHTTPPort(WebServiceFeature... features) {
        return super.getPort(HTTPPort, SIWSTORFCZACPMF001Req.class, features);
    }

}
